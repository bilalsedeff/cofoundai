# CoFound.ai High-Level System Architecture

## Overview

CoFound.ai is a cloud-native, microservices-based multi-agent software development system designed to automate the development process through specialized AI agents. The system runs on Google Cloud Platform and orchestrates agents that work together like a development team, handling everything from planning and architecture to coding, testing, and documentation.

## Cloud Infrastructure

The system is deployed on **Google Cloud Platform** with the following core infrastructure:

### Compute & Orchestration
- **Google Kubernetes Engine (GKE)**: Container orchestration for microservices
- **Cloud Run**: Serverless container platform for lightweight services
- **Compute Engine**: VM instances for specialized workloads

### Data & Storage
- **Cloud SQL (PostgreSQL)**: Primary database for application data
- **Memorystore (Redis)**: In-memory cache and session storage
- **Cloud Storage**: File storage and static assets
- **Firestore**: Document database for real-time data

### Messaging & Integration
- **Pub/Sub**: Asynchronous messaging between microservices
- **Vertex AI**: Machine learning and LLM services
- **Secret Manager**: Secure secret and credential storage

### CI/CD & Monitoring
- **Cloud Build**: Continuous integration and deployment
- **Artifact Registry**: Container image registry
- **Cloud Logging & Monitoring**: Observability and alerting

## Folder Structure and Organization

```
cofoundai/                      # Main package
  ├── agents/                   # Agent definitions and behaviors
  │   ├── planner.py            # Project planning agent
  │   ├── architect.py          # Architecture design agent
  │   ├── developer.py          # Code development agent
  │   ├── tester.py             # Testing agent
  │   ├── reviewer.py           # Code review agent
  │   ├── documentor.py         # Documenter agent
  │   ├── langgraph_agent.py    # LangGraph compatible agent implementation
  │   └── extensible_agent.py   # Base classes for extensible agents
  │
  ├── api/                      # API Layer
  │   ├── app.py                # FastAPI Agent Protocol server
  │   └── backend_api.py        # Flask REST API server (moved from root)
  │
  ├── cli/                      # Command line interface
  │   ├── main.py               # Main CLI entry point
  │   ├── commands.py           # CLI commands and functionality
  │   └── output_formatter.py   # Output formatting (if exists)
  │
  ├── communication/            # Inter-agent communication
  │   ├── message.py            # Message object definition
  │   ├── agent_command.py      # Command protocol definitions
  │   ├── protocol.py           # Communication protocols
  │   ├── acp_adapter.py        # ACP protocol adapter
  │   └── mcp_adapter.py        # MCP protocol adapter
  │
  ├── config/                   # Configuration files
  │   ├── schema/               # JSON schemas
  │   │   ├── components.yaml   # Component definitions
  │   │   ├── graph.yaml        # Graph configurations
  │   │   └── workflows_schema.json # Schema for workflow configuration
  │   ├── system_config.yaml    # System configurations
  │   └── workflows.yaml        # Workflow definitions (LangGraph integration)
  │
  ├── core/                     # Core system components
  │   ├── llm_interface.py      # LLM API integration
  │   ├── config_loader.py      # Configuration loading and management
  │   ├── base_agent.py         # Base agent class
  │   ├── extensibility.py      # Interfaces and classes for extensible components
  │   └── component_factory.py  # Factory to instantiate extensible components dynamically
  │
  ├── memory/                   # Memory systems
  │   ├── short_term.py         # Short-term memory
  │   ├── project_context.py    # Project context
  │   └── vector_store.py       # Vector DB interface
  │
  ├── orchestration/            # Agent orchestration and coordination
  │   ├── orchestrator.py       # Main orchestration engine
  │   ├── langgraph_workflow.py # LangGraph workflow management
  │   ├── agentic_graph.py      # Dynamic agent graph for routing
  │   ├── dynamic_graph.py      # Extended graph functionality
  │   ├── supervisor.py         # Workflow supervision and monitoring
  │   └── extensible_orchestrator.py  # Orchestrator integrating extensible components
  │
  ├── tests/                    # Test files
  │   ├── conftest.py           # Test configuration
  │   ├── integration/          # Integration tests
  │   │   ├── test_acp.py
  │   │   ├── test_agent_communication.py
  │   │   ├── test_agent_protocol.py
  │   │   ├── test_end_to_end_workflow.py
  │   │   └── test_llm_integration.py
  │   └── unit/                 # Unit tests
  │       ├── test_agentic_graph.py
  │       ├── test_context7.py
  │       ├── test_file_manager.py
  │       ├── test_google_cloud_integration.py
  │       ├── test_version_control.py
  │       └── test_workflow.py
  │
  ├── tools/                    # Agent tools
  │   ├── code_generator.py     # Code generation tool
  │   ├── file_manager.py       # File management
  │   ├── version_control.py    # Version control (Git) tool
  │   ├── context7_adapter.py   # Documentation access tool
  │   └── extensible_tool.py    # Base classes for extensible tool components
  │
  └── utils/                    # Helper functions
      ├── logger.py             # Logging module with JSON formatting
      ├── langsmith_integration.py # LangSmith integration
      └── helpers.py            # Helper functions (if exists)
│
├── services/                   # Microservices (Cloud Infrastructure)  
│   ├── dream-service/          # Dream service microservice
│   │   ├── Dockerfile
│   │   ├── main.py
│   │   └── requirements.txt
│   ├── monitoring/             # Monitoring service
│   │   └── monitor_dashboard.py
│   └── orchestrator/           # Orchestrator service
│       └── src/
│           └── index.ts
│
├── frontend/                   # Web Frontend
│   ├── index.html              # Main HTML interface
│   ├── styles.css              # CSS styling and responsive design
│   └── script.js               # JavaScript functionality and API integration
│
├── infra/                      # Infrastructure as Code
│   └── main.tf                 # Terraform main configuration
│
├── k8s/                        # Kubernetes Manifests
│   └── dream-service-deployment.yaml  # Kubernetes deployment config
│
├── demos/                      # Demo scripts and examples
│   ├── demo_cofoundai_cli.py   # CLI demo script
│   ├── demo_english.bat        # English demo batch script
│   ├── demo_test_agents.bat    # Agent testing demo
│   ├── run_demo.bat           # Demo runner (Windows)
│   ├── run_demo.sh            # Demo runner (Unix)
│   ├── projects/              # Demo projects (cleaned)
│   └── logs/                  # Demo logs
│
├── scripts/                    # Utility scripts  
│   ├── check_yaml.py          # YAML validation script
│   ├── fix_imports.py         # Import fixing script
│   ├── fix_null_bytes.py      # Null bytes fixing script
│   ├── run_tests.py           # Test runner script
│   ├── test_echo.bat          # Test echo script
│   ├── test_langgraph.py      # LangGraph testing script
│   ├── visualize_code_review.py  # Code review visualization
│   ├── visualize_develop_app.py  # App development visualization
│   ├── visualize_prototype.py    # Prototype visualization
│   └── visualize_workflow.py     # Workflow visualization
│
├── docs/                       # Documentation
│   ├── HIGHLEVEL-ARCHITECTURE.txt  # This file
│   ├── HIGHLEVEL-CHANGELOG.txt     # Change log
│   └── README-TESTING.md           # Testing documentation
│
├── Project-Readings/           # Project documentation and readings
│   ├── CoFound.ai Multi‑Agent System Integration Report.pdf
│   ├── CoFound.ai Multi‑Agent System Integration Report.txt
│   ├── CoFound.ai Technical Architecture Whitepaper and Specification.pdf
│   └── CoFound.ai Technical Architecture Whitepaper and Specification.txt
│
├── projects/                   # User projects (created projects go here)
│   └── proj_*                 # Project-specific directories with artifacts
│
├── logs/                       # Logs (organized structure)
│   ├── agents/                # Agent-specific logs
│   │   ├── architect/         # Architect agent logs
│   │   ├── developer/         # Developer agent logs
│   │   ├── documentor/        # Documenter agent logs
│   │   ├── planner/           # Planner agent logs
│   │   ├── reviewer/          # Reviewer agent logs
│   │   └── tester/            # Tester agent logs
│   ├── system/                # System logs
│   └── workflows/             # Workflow logs by project ID
│
├── memory-bank/                # Memory bank storage
│
├── ana_akis.txt               # Turkish workflow documentation (newly created)
├── README.md                  # Main project README
├── requirements.txt           # Python dependencies
├── package.json              # Node.js dependencies
├── pytest.ini               # Pytest configuration
├── .yamllint.yml            # YAML linting configuration
├── .gitignore               # Git ignore rules
└── LICENSE                  # Project license
```

## Module Details

### cofoundai/agents/ - Agent Definitions and Behaviors

This module contains specialized AI agents that handle different aspects of the software development process:

- **planner.py**: Project planning and task breakdown agent that analyzes requirements and creates project plans
- **architect.py**: System architecture design agent that creates component diagrams and technology stack recommendations
- **developer.py**: Code development agent that writes, refactors, and debugs code
- **tester.py**: Code testing and quality control agent that writes and executes tests
- **reviewer.py**: Code review and improvement agent that identifies issues and suggests optimizations
- **documentor.py**: Documenter agent that creates technical documentation and guides
- **langgraph_agent.py**: Base implementation for LangGraph-compatible agents with workflow integration
- **extensible_agent.py**: Base classes for defining extensible agents

### cofoundai/api/ - API Layer

This module provides both CLI and web API interfaces:

- **app.py**: FastAPI implementation of Agent Protocol standard for agent communication
- **backend_api.py**: Flask-based REST API server for web frontend integration (moved from root)

### cofoundai/cli/ - Command Line Interface

This module provides the command-line interface for interacting with the system:

- **main.py**: Main CLI entry point that parses arguments and initiates workflows
- **commands.py**: Implementation of CLI commands for different operations
- **output_formatter.py**: Formats output for CLI display with colors and formatting (if exists)

### cofoundai/communication/ - Agent Communication

This module defines the communication protocol between agents:

- **message.py**: Message class for standardized agent communication
- **agent_command.py**: Command structures used by agents to trigger actions and transitions
- **protocol.py**: Definitions of communication protocols and standards
- **acp_adapter.py**: ACP protocol adapter for external agent integration
- **mcp_adapter.py**: MCP protocol adapter for external tools and models

### cofoundai/config/ - Configuration Files

This module contains configuration files and schemas:

- **system_config.yaml**: System-wide configuration including LLM settings
- **workflows.yaml**: Workflow definitions specifying agent interactions and transitions
- **schema/**: JSON schemas directory
  - **components.yaml**: Component definitions
  - **graph.yaml**: Graph configurations  
  - **workflows_schema.json**: JSON schema for validating workflow configurations

### cofoundai/core/ - Core System Components

This module contains core functionality:

- **llm_interface.py**: Interface for interacting with Language Models via different providers
- **config_loader.py**: Manages loading and validating configuration
- **base_agent.py**: Base class that all agents inherit from
- **extensibility.py**: Interfaces and classes for extensible components and provider types
- **component_factory.py**: Factory to instantiate extensible components dynamically

### cofoundai/memory/ - Memory Systems

This module implements memory capabilities for agents:

- **short_term.py**: Short-term memory for current context within a session
- **project_context.py**: Stores and manages context specific to a project
- **vector_store.py**: Abstraction over vector database implementations

### cofoundai/orchestration/ - Agent Orchestration and Coordination

This module manages multi-agent workflows:

- **orchestrator.py**: Coordinates multiple agents and manages workflow execution
- **langgraph_workflow.py**: Integration with LangGraph for state-based workflow management
- **agentic_graph.py**: Implements dynamic agent routing through a graph structure
- **dynamic_graph.py**: Extended capabilities for dynamic graph modifications
- **supervisor.py**: Monitors and supervises workflow execution
- **extensible_orchestrator.py**: Orchestrator integrating extensible components into LangGraph workflows

### cofoundai/tools/ - Agent Tools

This module contains tools that agents can use:

- **code_generator.py**: Tool for generating code snippets and files
- **file_manager.py**: File system operations and management
- **version_control.py**: Git integration for version control operations
- **context7_adapter.py**: Documentation and reference access tool
- **extensible_tool.py**: Base classes for creating extensible tool components

### cofoundai/utils/ - Utility Functions

This module provides helper functions and utilities:

- **logger.py**: Structured logging with JSON formatting and agent context
- **langsmith_integration.py**: Integration with LangSmith for workflow monitoring
- **helpers.py**: General helper functions (if exists)

## Services Architecture (Microservices)

### services/dream-service/ - Dream Service Microservice
FastAPI-based microservice that handles initial user vision processing and dream phase operations.

### services/monitoring/ - Monitoring Service  
Dashboard and monitoring capabilities for the entire system.

### services/orchestrator/ - Orchestrator Service
Node.js/TypeScript-based orchestrator service for managing LangGraph workflows in a distributed environment.

## Frontend Architecture

### frontend/ - Web Interface
- **index.html**: Modern web interface with glassmorphism design
- **styles.css**: Advanced CSS animations and responsive design
- **script.js**: Real-time chat interface and API integration

## Infrastructure and Deployment

### infra/ - Infrastructure as Code
Terraform configurations for Google Cloud Platform deployment.

### k8s/ - Kubernetes Manifests
Kubernetes deployment configurations for containerized services.

## Development and Testing

### demos/ - Demonstration Scripts
Example scripts and demo projects for showcasing system capabilities.

### scripts/ - Utility Scripts
Various utility scripts for development, testing, and maintenance.

### tests/ - Test Suite
Comprehensive testing including unit tests and integration tests.

## Documentation and Resources

### docs/ - Documentation
Architecture documentation, changelogs, and technical specifications.

### Project-Readings/ - Reference Materials
Technical whitepapers and integration reports.

## Data and Storage

### projects/ - User Projects
Directory where all user-created projects are stored with their artifacts.

### logs/ - System Logs
Organized logging structure with separate directories for agents, system, and workflows.

### memory-bank/ - Memory Storage
Persistent storage for agent memory and context.

## System State and Progress

The system has been recently cleaned and organized with:

✅ **Clean Project Structure**: All files organized according to architectural principles
✅ **Proper Log Organization**: Agent, system, and workflow logs properly separated  
✅ **API Layer Consolidation**: Backend API moved to proper location
✅ **Demo Cleanup**: Old demo projects removed, structure maintained
✅ **Missing Directory Creation**: All required directories created according to architecture
✅ **Documentation Updates**: Architecture and workflow documentation updated

## Key Changes Made During Organization

1. **File Reorganization**: 
   - Moved `backend_api.py` from root to `cofoundai/api/`
   - Cleaned up old demo project directories
   - Removed development artifacts (node_modules, etc.)

2. **Directory Structure**: 
   - Created proper log directory structure for agents
   - Established `projects/` directory for user projects
   - Organized system and workflow logs

3. **Documentation**: 
   - Created `ana_akis.txt` for Turkish workflow documentation
   - Updated architecture documentation to reflect current state
   - Maintained consistency between documentation and actual structure

4. **Cleanup**: 
   - Removed temporary and development files
   - Cleaned up demo project artifacts
   - Maintained only necessary configuration and source files

The system now has a clean, organized structure that matches the documented architecture and supports both development and production deployment scenarios.
