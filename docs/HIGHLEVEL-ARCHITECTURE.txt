# CoFound.ai High-Level System Architecture

## Overview

CoFound.ai is a multi-agent software development system designed to automate the development process through specialized AI agents. The system orchestrates agents that work together like a development team, handling everything from planning and architecture to coding, testing, and documentation.

## Folder Structure and Organization

```
cofoundai/                      # Main package
  ├── agents/                   # Agent definitions and behaviors
  │   ├── planner.py            # Project planning agent
  │   ├── architect.py          # Architecture design agent
  │   ├── developer.py          # Code development agent
  │   ├── tester.py             # Testing agent
  │   ├── reviewer.py           # Code review agent
  │   ├── documentor.py         # Documentation agent
  │   └── langgraph_agent.py    # LangGraph compatible agent implementation
  │
  ├── cli/                      # Command line interface
  │   ├── main.py               # Main CLI entry point
  │   ├── commands.py           # CLI commands and functionality
  │   └── output_formatter.py   # Output formatting
  │
  ├── communication/            # Inter-agent communication
  │   ├── message.py            # Message object definition
  │   ├── agent_command.py      # Command protocol definitions
  │   └── protocol.py           # Communication protocols
  │
  ├── config/                   # Configuration files
  │   ├── schema/               # JSON schemas
  │   │   └── workflows_schema.json # Schema for workflow configuration
  │   ├── agent_config.yaml     # Agent configurations
  │   ├── system_config.yaml    # System configurations
  │   └── workflows.yaml        # Workflow definitions (LangGraph integration)
  │
  ├── core/                     # Core system components
  │   ├── llm_interface.py      # LLM API integration
  │   ├── config_manager.py     # Configuration management
  │   ├── system.py             # System management
  │   └── base_agent.py         # Base agent class
  │
  ├── memory/                   # Memory systems
  │   ├── short_term.py         # Short-term memory
  │   ├── long_term.py          # Long-term memory (vector database)
  │   ├── project_context.py    # Project context
  │   └── vector_store.py       # Vector DB interface
  │
  ├── orchestration/            # Agent orchestration and coordination
  │   ├── orchestrator.py       # Main orchestration engine
  │   ├── langgraph_workflow.py # LangGraph workflow management
  │   ├── agentic_graph.py      # Dynamic agent graph for routing
  │   ├── dynamic_graph.py      # Extended graph functionality
  │   └── supervisor.py         # Workflow supervision and monitoring
  │
  ├── tests/                    # Test files
  │   ├── unit/                 # Unit tests
  │   ├── integration/          # Integration tests
  │   └── fixtures/             # Test fixtures
  │
  ├── tools/                    # Agent tools
  │   ├── code_generator.py     # Code generation tool
  │   ├── file_manager.py       # File management
  │   ├── version_control.py    # Version control (Git) tool
  │   └── context7_adapter.py   # Documentation access tool
  │
  └── utils/                    # Helper functions
      ├── logger.py             # Logging module with JSON formatting
      ├── prompt_templates.py   # Prompt templates
      └── helpers.py            # Helper functions
│
logs/                           # Logs
  ├── agents/                   # Agent-specific logs
  │   ├── architect/            # Architect agent logs
  │   ├── developer/            # Developer agent logs
  │   ├── documentor/           # Documentor agent logs
  │   ├── planner/              # Planner agent logs
  │   ├── reviewer/             # Reviewer agent logs
  │   └── tester/               # Tester agent logs
  │
  ├── system/                   # System logs
  └── workflows/                # Workflow logs by project ID
      └── workflow_*            # Workflow-specific log directories
│
projects/                       # User projects
  └── proj_*                    # Project-specific directories with artifacts
```

## Module Details

### cofoundai/agents/ - Agent Definitions and Behaviors

This module contains specialized AI agents that handle different aspects of the software development process:

- **planner.py**: Project planning and task breakdown agent that analyzes requirements and creates project plans
- **architect.py**: System architecture design agent that creates component diagrams and technology stack recommendations
- **developer.py**: Code development agent that writes, refactors, and debugs code
- **tester.py**: Code testing and quality control agent that writes and executes tests
- **reviewer.py**: Code review and improvement agent that identifies issues and suggests optimizations
- **documentor.py**: Project documentation agent that creates technical documentation and guides
- **langgraph_agent.py**: Base implementation for LangGraph-compatible agents with workflow integration

### cofoundai/cli/ - Command Line Interface

This module provides the command-line interface for interacting with the system:

- **main.py**: Main CLI entry point that parses arguments and initiates workflows
- **commands.py**: Implementation of CLI commands for different operations
- **output_formatter.py**: Formats output for CLI display with colors and formatting

### cofoundai/communication/ - Agent Communication

This module defines the communication protocol between agents:

- **message.py**: Message class for standardized agent communication
- **agent_command.py**: Command structures used by agents to trigger actions and transitions
- **protocol.py**: Definitions of communication protocols and standards

### cofoundai/config/ - Configuration Files

This module contains configuration files and schemas:

- **agent_config.yaml**: Configuration settings for different agent types
- **system_config.yaml**: System-wide configuration including LLM settings
- **workflows.yaml**: Workflow definitions specifying agent interactions and transitions
- **schema/workflows_schema.json**: JSON schema for validating workflow configurations

### cofoundai/core/ - Core System Components

This module contains core functionality:

- **llm_interface.py**: Interface for interacting with Language Models via different providers
- **config_manager.py**: Manages loading and validating configuration
- **system.py**: Handles system initialization and management
- **base_agent.py**: Base class that all agents inherit from

### cofoundai/memory/ - Memory Systems

This module implements memory capabilities for agents:

- **short_term.py**: Short-term memory for current context within a session
- **long_term.py**: Long-term memory using vector databases for persistent knowledge
- **project_context.py**: Stores and manages context specific to a project
- **vector_store.py**: Abstraction over vector database implementations

### cofoundai/orchestration/ - Agent Orchestration and Coordination

This module manages multi-agent workflows:

- **orchestrator.py**: Coordinates multiple agents and manages workflow execution
- **langgraph_workflow.py**: Integration with LangGraph for state-based workflow management
- **agentic_graph.py**: Implements dynamic agent routing through a graph structure
- **dynamic_graph.py**: Extended capabilities for dynamic graph modifications
- **supervisor.py**: Monitors and supervises workflow execution

### cofoundai/tests/ - Test Files

This module contains test infrastructure:

- **unit/**: Unit tests for individual components
- **integration/**: Tests for integrated components working together
- **fixtures/**: Test data and mock objects for testing

### cofoundai/tools/ - Agent Tools

This module provides tools that agents can use:

- **code_generator.py**: Tool for generating and modifying code
- **file_manager.py**: Tool for file operations (read, write, modify)
- **version_control.py**: Git-based version control tool
- **context7_adapter.py**: Tool for accessing external documentation

### cofoundai/utils/ - Helper Functions

This module contains utility functions:

- **logger.py**: Structured logging with JSON formatting and thread tracking
- **prompt_templates.py**: Templates for agent interactions with LLMs
- **helpers.py**: General utility functions

### logs/ - Log Files

This directory stores log files:

- **agents/**: Agent-specific logs organized by agent type
- **system/**: System-wide logs
- **workflows/**: Logs organized by workflow ID

## Layered Architecture

CoFound.ai implements a layered architecture that separates concerns and allows for modular development:

### 1. User Interface Layer
- **CLI Interface**: Command-line interface for user requests and interaction
- **Dashboard**: (Future) Web interface for monitoring workflow status and agents
- **Request Processing**: Components that handle and validate user requests

### 2. Workflow Layer
- **Orchestration Engine**: Core components that manage workflows:
  - **LangGraph StateGraph**: State machine with transitions between agents
  - **AgenticGraph**: Dynamic routing based on agent decisions
  - **Handoff Mechanism**: Tools that enable agents to transfer control
  - **State Tracking**: Monitoring of workflow state and agent activity
- **Workflow Definitions**: YAML configuration of different workflow types

### 3. Agent Layer
- **Agent Communication Protocol (ACP)**: Standardized message format for agent interactions
- **Specialized Agents**: Task-specific agents with distinct roles:
  - **Planner**: Requirement analysis and task planning
  - **Architect**: System design and technical decisions
  - **Developer**: Code implementation and refinement
  - **Tester**: Test creation and execution
  - **Reviewer**: Code review and improvement suggestions
  - **Documentor**: Documentation creation and maintenance
- **Base Agent**: Common functionality shared by all agents
- **LangGraph Integration**: Wrapper that adapts agents to LangGraph workflows

### 4. Memory Layer
- **Short-Term Memory**: Temporary context for current session
- **Long-Term Memory**: Persistent knowledge using vector databases
- **Project Context**: Project-specific information and history

### 5. Communication Layer
- **Message System**: Structured message passing between agents
- **Command Structure**: Action commands that trigger state changes
- **State Management**: Mechanisms to manage and persist state

### 6. Monitoring and Logging Layer
- **Structured Logging**: JSON-formatted logs with consistent structure
- **Agent-Specific Logs**: Separate logs for each agent type
- **Workflow Logs**: Process-level logging for each workflow
- **Log Analysis**: Tools to analyze and visualize log data

### 7. Tools Layer
- **Code Generation**: Tools for creating and modifying code
- **Version Control**: Git-based version tracking
- **File Operations**: Reading, writing, and updating files
- **Documentation Access**: Tools to access external documentation

### 8. Configuration Layer
- **System Settings**: Global configuration
- **Agent Configuration**: Agent-specific settings
- **Workflow Definition**: Process and transition definitions
- **LLM Settings**: Language model configuration and API keys

## Workflow and Agent Interaction

The CoFound.ai development process follows this general workflow:

1. **Request Processing**: User submits a software development request via CLI
2. **Workflow Selection**: System selects appropriate workflow type
3. **Planning Phase**: Planner agent breaks down the request into tasks
4. **Architecture Phase**: Architect agent designs system components and relationships
5. **Development Phase**: Developer agent implements code based on design
6. **Testing Phase**: Tester agent creates and runs tests
7. **Review Phase**: Reviewer agent evaluates code quality and suggests improvements
8. **Documentation Phase**: Documentor agent creates user and technical documentation
9. **Delivery**: System provides completed software artifacts to user

## Agentic Graph Orchestration

The core innovation of CoFound.ai is its flexible agent orchestration system:

1. **Dynamic Agent Selection**: Agents can decide when to hand off to other agents
2. **Tool-Based Routing**: Agents use special tools to transfer control
3. **State Persistence**: All workflow state is tracked and persisted
4. **Conditional Transitions**: Graph edges can have conditions for transitions
5. **Real-Time Monitoring**: Streaming updates during workflow execution

## LLM Integration and Test Mode

The system supports two primary operation modes:

1. **Production Mode**: Uses real LLM API calls for agent processing
   - Integration with multiple LLM providers (OpenAI, Anthropic, etc.)
   - Full agent capabilities with dynamic responses
   - Requires API keys and incurs usage costs

2. **Test Mode**: Operates without LLM API calls
   - Uses predefined responses for deterministic behavior
   - All agent classes support a `test_mode` parameter
   - Enables development and testing without API costs
   - Useful for integration testing and demonstrations

## Technology Stack

CoFound.ai leverages these key technologies:

1. **Python**: Primary programming language
2. **LangChain**: Framework for LLM application development
3. **LangGraph**: Agent orchestration and workflow management
4. **Vector Databases**: Storage for semantic memory (ChromaDB, etc.)
5. **YAML**: Configuration and workflow definition format
6. **JSON Schema**: Validation of configuration files
7. **Git**: Version control for code artifacts

## Completed Features

- ✅ LangGraph workflow integration
- ✅ Agent Communication Protocol (ACP)
- ✅ Dynamic agent routing with graph structure
- ✅ Structured logging with JSON format
- ✅ Configuration validation with JSON Schema
- ✅ Test mode for LLM-free operation
- ✅ Command-line interface
- ✅ Basic workflow visualization
- ✅ File and version control tools

## Future Enhancements

1. **Web Interface**: Browser-based UI for workflow monitoring
2. **Expanded Agent Capabilities**: More specialized agents for different tasks
3. **Multi-User Support**: Collaborative development with multiple users
4. **Enhanced Memory**: Improved vector database integration
5. **CI/CD Integration**: Pipeline integration for automated workflows
6. **Metrics Dashboard**: Performance and usage statistics
7. **Custom Agent Creation**: User-defined agent capabilities
8. **Multi-Language Support**: Beyond Python to JavaScript, Go, etc.
