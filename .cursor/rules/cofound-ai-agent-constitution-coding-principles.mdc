---
description: 
globs: 
alwaysApply: true
---
### CoFound.ai Agent Constitution & Coding Principles

#### 1. High-Level Project Understanding

* Always maintain a clear understanding of CoFound.ai’s high-level vision: automating complete departments or organizations through modular, scalable, and autonomous agent-based workflows.
* Each agent interaction, code generation, or change must directly support the primary goal: seamless integration, scalability, and modular functionality.

#### 2. Modular and Extensible Architecture

* Strictly adhere to the layered architecture model: User Interface, API & Services, Business Logic, Agent Orchestration, Data Storage, Integration, and Monitoring layers.
* Design every module to be replaceable or extensible without major refactoring.
* Ensure communication between layers uses standardized protocols and clear interfaces.

#### 3. LangGraph Integration and Workflow Management

* LangGraph is the heart of orchestration. Clearly define workflow states, transitions, and conditions.
* Implement error handling within LangGraph transitions to gracefully recover from agent errors.
* Regularly update and document the LangGraph workflow graph state clearly and concisely.

#### 4. Agent Communication and Standardization

* All agent interactions must strictly follow the defined communication protocol.
* Messages must be clear, structured, and consistently formatted (JSON format strongly recommended).
* Ensure agents validate incoming and outgoing messages rigorously.

#### 5. Memory and Context Management

* Always leverage Vector DB for storing and retrieving long-term context.
* Ensure every agent interaction properly utilizes available historical data for better decision-making.
* Document and index all significant insights, learnings, or errors in the Vector DB clearly.

#### 6. Repository and Version Control

* Utilize Git for code storage, versioning, and management.
* Commit frequently, each commit reflecting meaningful, atomic changes.
* Write clear, informative commit messages that precisely describe the changes and their purpose.

#### 7. CI/CD and Automated Testing

* Every new piece of code or documentation must trigger automated build and testing processes.
* Act immediately on CI/CD feedback; ensure code passes all tests before marking completion.
* Ensure your CI/CD pipeline integration is robust, scalable, and provides detailed error reports.

#### 8. Logging, Monitoring, and Alerting

* Every workflow event and agent action must be logged thoroughly for traceability.
* Implement comprehensive monitoring that provides real-time insights into system health, performance, and errors.
* Critical errors or workflow interruptions must trigger alerts and clear notification processes.

#### 9. Coding Standards and Quality

* Write correct, up-to-date, bug-free, fully functional, secure, and efficient code.
* Prioritize readability over performance.
* Fully implement all requested functionality. Leave NO TODOs, placeholders, or missing pieces.
* Ensure code is complete! Thoroughly verify final version.
* Include all required imports and ensure proper naming of key components.
* Comments MUST describe purpose, not effect.
* Prioritize modularity, DRY principles, performance, and security.

#### 10. Security and Data Privacy

* Always incorporate security best practices at every layer of development.
* Protect sensitive data rigorously, implement encryption at rest and in transit, and adhere to GDPR and other data protection standards.
* Regularly review security protocols and access controls.

#### 11. Scalability and Performance

* Design and test every component for scalability, assuming exponential growth in user base and data.
* Optimize performance at every layer and constantly review bottlenecks or latency issues.
* Ensure performance metrics are regularly reviewed and improved.

#### 12. Documentation and Clarity

* Document every significant decision, code logic, and workflow clearly and concisely.
* Maintain thorough documentation for API interfaces, workflow diagrams, and system architecture.
* Always update documentation concurrently with any code changes or architecture modifications.

#### 13. Iterative Development and Learning

* Continuously iterate and improve upon each agent’s performance based on outcomes and learnings.
* Regularly update system context with new insights from successful tasks and errors.
* Foster a continuous improvement culture within the workflow and among agents.

#### 14. Human-in-the-Loop and Escalation

* Clearly define escalation procedures and thresholds for when human intervention is necessary.
* Always keep human intervention minimal, but easily accessible and clearly documented.

---

### Extended Programming Operating Protocol (inspired by RIPER-5)

#### Agent Mode System:

Each response must be internally aligned to a mental operational mode:

* **\[MODE: RESEARCH]** - Only observe, ask clarifying questions, understand existing structure.
* **\[MODE: INNOVATE]** - Brainstorm possibilities and ideas without proposing specific implementations.
* **\[MODE: PLAN]** - Create detailed implementation plans, without writing code. All plans must include a numbered checklist.
* **\[MODE: EXECUTE]** - Implement ONLY what’s described in PLAN. No deviation allowed. If needed, return to PLAN mode.
* **\[MODE: REVIEW]** - Review implementation against plan with strict, line-by-line validation. Report deviation if any.

#### Coding Process and Protocols:

* Think step-by-step before coding.
* Describe intentions in pseudocode before writing actual implementation.
* Avoid guessing — acknowledge uncertainties clearly.
* Show priorities in every coding step and modular breakdown.
* Add `TODO` comments clearly where applicable and request follow-up.
* Prioritize clean modular output, returning full files or isolated code blocks where needed.

#### Code Quality Directives:

* Ensure secure, correct, complete code.
* Respect file/environment structure and project architecture.
* Use consistent naming conventions.
* Adhere to DRY principles, prioritize readability, maintainability, and extensibility.
* All code must include comments that explain **intent**, not just function.

#### Output Format Guidance:

* Always begin with filename as comment header.
* Output detail verbosity can be toggled via `V=0–3`.
* End each implementation with a concise summary of changes, source file tracking, and pending next steps.

#### Final Rule:

You will always check HIGHLEVEL-CHANGELOG.txt and insert your works to it.

