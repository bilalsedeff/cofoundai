**Agent, initiate the **Dream Phase** design and alignment. Treat this as a kickoff brief to a senior Cloud Architect / Full-Stack Engineer:**

---

**Task #1: Bootstrap Dream Phase on Google Cloud (Infrastructure + Service Scaffolding)**

1. **Infrastructure-as-Code Provisioning**

   * Write Terraform modules to provision:

     * **GKE cluster** (1 control-plane, 2+ node pools)
     * **Cloud SQL (Postgres)** instance (private IP, automated backups)
     * **Memorystore (Redis)** for session/cache
     * **Pub/Sub topics**: `dream-requested`, `dream-processed`, `blueprint-generated`
     * **Vertex AI** API enablement (Text Generation + Embeddings)
     * **Secret Manager** entries for API keys (OpenAI, DB credentials)
   * Validate `terraform plan` passes with zero drift.

2. **Mono-repo & Service Skeleton**

   * Create folders:

     ```
     /services/dream-service  
     /services/orchestrator  
     /frontend/dream-spa
     ```
   * In **/services/dream-service**:

     * Scaffold a **FastAPI** project (Python 3.10), define OpenAPI spec for `POST /api/dream`
     * Dockerize with `Dockerfile` (alpine-slim base, multi-stage build)
     * Implement placeholder handler that returns `{ status: "ok" }`.
   * In **/services/orchestrator**:

     * Scaffold a **Node.js** (TypeScript) microservice listening on Pub/Sub subscriptions
     * Define `DreamAgent` and `BlueprintAgent` invocation stubs.
   * In **/frontend/dream-spa**:

     * Bootstrap **React + TypeScript** project (Vite)
     * Add a single page “Dream” with `<textarea>` + `<button>Generate Blueprint>`
     * Configure hosting via **Cloud Run** (or **App Engine**).

3. **Messaging Schema & Contracts**

   * Define JSON schemas in `/services/schemas/dream.schema.json`:

     * `DreamRequest { userId: string; projectId: string; promptText: string; }`
     * `DreamResult { draftId: string; content: string; metadata: {...}; }`
   * Version schemas using **semver** and document in **ARCHITECTURE.md**.

4. **CI/CD Pipeline Setup**

   * In **.github/workflows/** or **Cloud Build** config:

     1. **Lint** (`flake8` / `eslint`)
     2. **Unit tests** (pytest for Python, Jest for TS)
     3. **Build Docker images** → push to **Artifact Registry**
     4. **Deploy** to staging GKE namespace or Cloud Run
   * Ensure tests must achieve ≥ 80% coverage.

5. **Local Development & Testing**

   * Provide `docker-compose.yml` to spin up Postgres, Redis, Pub/Sub emulator for local end-to-end testing.
   * Write at least one integration test that posts to `/api/dream` and asserts a 200 response.

6. **Documentation & Changelog**

   * Update **ARCHITECTURE.md** with:

     * Sequence diagram of Dream Phase workflow
     * Resource maps (Terraform modules → GCP resources)
   * Append entry under **Dream Phase** in **HIGHLEVEL-CHANGELOG.txt**:

     ```
     * [YYYY-MM-DD] Initialized Terraform infra modules and service scaffolding for Dream Phase.
     ```
   * Commit atomic changes with clear messages.

---

**Deliverable:** A GitHub PR containing:

* Terraform code (`/infra/dream`)
* Service scaffolds (`/services/*`, `/frontend/dream-spa`)
* Messaging schemas
* CI/CD configs
* Local dev setup
* Updated docs & changelog

Execute this with rigorous adherence to clean-code, SOLID principles, and security best practices.
