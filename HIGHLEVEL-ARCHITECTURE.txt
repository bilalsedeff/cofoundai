# CoFound.ai Yüksek Seviye Mimari Dökümantasyonu

## Genel Klasör/Dosya Yapısı

```
cofoundai/                      # Ana paket
  ├── agents/                   # Ajan tanımları ve davranışları
  ├── cli/                      # Komut satırı arabirimi
  ├── communication/            # Ajanlar arası iletişim
  ├── config/                   # Konfigürasyon dosyaları
  │   ├── schema/               # JSON şemaları
  ├── core/                     # Çekirdek sistem bileşenleri
  ├── memory/                   # Hafıza sistemleri
  ├── orchestration/            # Ajan orkestrasyon ve koordinasyon
  ├── tests/                    # Test dosyaları
  ├── tools/                    # Ajan araçları
  └── utils/                    # Yardımcı fonksiyonlar
logs/                           # Loglar
  ├── system/                   # Sistem logları
  └── workflows/                # İş akışı logları
```

## Modül Detayları

### cofoundai/agents/ - Ajan Tanımları ve Davranışları
- **planner.py**: Proje planlama ve görev ayrıştırma ajanı
- **architect.py**: Sistem mimarisi tasarlama ajanı
- **developer.py**: Kod geliştirme ajanı
- **tester.py**: Kod testi ve kalite kontrol ajanı
- **reviewer.py**: Kod inceleme ve geliştirme ajanı
- **documentor.py**: Proje dokümantasyon ajanı

### cofoundai/cli/ - Komut Satırı Arabirimi
- **main.py**: Ana CLI giriş noktası
- **commands.py**: CLI komutları ve işlevselliği
- **output_formatter.py**: Çıktı biçimlendirme

### cofoundai/communication/ - Ajan İletişimi
- **message_bus.py**: Mesaj iletim sistemi
- **protocol.py**: İletişim protokolü tanımları
- **schemas.py**: Mesaj şemaları

### cofoundai/config/ - Konfigürasyon Dosyaları
- **agent_config.yaml**: Ajan konfigürasyonları
- **system_config.yaml**: Sistem konfigürasyonları
- **workflows.yaml**: İş akışı tanımları (LangGraph entegrasyonu)
- **schema/**: JSON şema dosyaları
  - **workflows_schema.json**: İş akışı yapılandırma dosyasının şeması

### cofoundai/core/ - Çekirdek Sistem Bileşenleri
- **llm_interface.py**: LLM API entegrasyonu
- **config_manager.py**: Konfigürasyon yönetimi
- **system.py**: Sistem yönetimi
- **base_agent.py**: Temel ajan sınıfı

### cofoundai/memory/ - Hafıza Sistemleri
- **short_term.py**: Kısa süreli hafıza
- **long_term.py**: Uzun süreli hafıza (vektör veritabanı)
- **project_context.py**: Proje bağlamı

### cofoundai/orchestration/ - Ajan Orkestrasyon ve Koordinasyon
- **orchestrator.py**: Ana orkestrasyon motoru
- **workflow.py**: İş akışı tanımları
- **task_manager.py**: Görev dağıtımı ve takibi
- **langgraph_workflow.py**: LangGraph iş akışı yönetimi

### cofoundai/tests/ - Test Dosyaları
- **unit/**: Birim testleri
- **integration/**: Entegrasyon testleri
- **fixtures/**: Test fikstürleri

### cofoundai/tools/ - Ajan Araçları
- **code_execution.py**: Kod yürütme aracı
- **testing_tools.py**: Test araçları
- **version_control.py**: Sürüm kontrol aracı
- **file_manager.py**: Dosya yönetimi

### cofoundai/utils/ - Yardımcı Fonksiyonlar
- **logger.py**: Loglama modülü
- **prompt_templates.py**: Prompt şablonları
- **helpers.py**: Yardımcı fonksiyonlar

### logs/ - Log Dosyaları
- **system/**: Sistem logları
- **workflows/**: İş akışı logları

## Tamamlanan Çalışmalar

- LangGraph entegrasyonu için gerekli iş akışı yapıları oluşturuldu.
- JSON Schema doğrulama sistemi kuruldu ve uygulandı.
- Tüm ajan sınıfları (PlannerAgent, ArchitectAgent, DeveloperAgent, TesterAgent, ReviewerAgent, DocumentorAgent) oluşturuldu.
- İş akışı yönetimi için LangGraph entegrasyonu tamamlandı.
- Loglama sistemi kuruldu, hem sisteme hem de iş akışlarına özel loglar üretiliyor.
- YAML yapılandırma dosyaları oluşturuldu ve doğrulama süreçleri tamamlandı.
- YAML yapılandırma şemaları iyileştirildi ve esnek yapı desteği eklendi.
- İş akışları YAML dosyası, ana bölüm (main) altına taşınarak standardize edildi.

# CoFound.ai High-Level System Architecture

## Katmanlı Mimari Yapısı

CoFound.ai bir çoklu-ajan (multi-agent) yazılım geliştirme sistemidir. Sistem, aşağıdaki katmanlardan oluşmaktadır:

### 1. Kullanıcı Arayüzü Katmanı
- **CLI Arayüzü**: Kullanıcıların komut satırından isteklerini iletmelerini sağlar
- **Gösterge Paneli**: (Gelecek) İş akışı durumunu ve ajanları izleme arayüzü
- **İstek İşleme**: Kullanıcı girdisini işleyen modüller

### 2. İş Akışı Katmanı
- **Orkestrasyon Motoru**: Aşağıdaki bileşenleri içerir:
  - **LangGraph StateGraph**: İş akışı durumlarını ve geçişlerini yönetir
  - **AgenticGraph**: Dinamik ajan yönlendirmesini ve transferini sağlar
  - **Handoff Mekanizması**: Ajanlar arası görev transferi için tools desteği
  - **Durum İzleme**: Aktif ajanı, önceki ajanı ve iş akışı durumunu takip eder
- **İş Akışı Tanımları**: YAML formatında tanımlanan iş akışı türleri

### 3. Ajan Katmanı
- **Agent İletişim Protokolü (ACP)**: Ajanlar arası standart iletişim formatı
- **Ajanlar**: Uzmanlaşmış yazılım geliştirme ajanları:
  - **Planner**: Proje planlaması ve görev ayrıştırması
  - **Architect**: Sistem mimarisi ve komponent tasarımı
  - **Developer**: Kod geliştirme ve implementasyon
  - **Tester**: Test yazımı ve kalite kontrolü
  - **Reviewer**: Kod inceleme ve geliştirme önerileri
  - **Documentor**: Teknik dokümantasyon yazımı
- **Base Agent**: Tüm ajanlarda ortak işlevselliği sağlayan temel sınıf
- **LangGraph Agent Wrapper**: LangGraph ile entegrasyon için sarmalayıcı

### 4. Hafıza Katmanı
- **Kısa Dönemli Hafıza**: Aktif oturum durumunu tutan hafıza
- **Uzun Dönemli Hafıza**: Vektör veritabanı yoluyla tutarlı hafıza
- **Proje Bağlamı**: Geliştirme sürecine özgü bağlam verileri

### 5. İletişim Katmanı
- **Message Sınıfı**: Ajanlar arası mesajlaşma standardı
- **Command Sınıfı**: Ajanlar arası komut yapısı
- **Handoff Tools**: Ajanlar arası iletişimde araç olarak kullanılan transferler
- **State Yönetimi**: İş akışı durumunu güncelleyen ve ileten mekanizmalar

### 6. İzleme ve Loglama Katmanı
- **Yapılandırılmış Logger**: Tüm sistem bileşenlerinin standart loglama mekanizması
- **JSONLogger**: Yapılandırılmış JSON formatında loglama
- **Workflow Logger**: İş akışına özel loglama
- **Agent Logger**: Ajanlara özel loglama
- **Log Analyzer**: Log kayıtlarını analiz eden ve raporlayan araç
- **Thread Tracking**: Thread ID ile iş akışı adımlarını takip etme

### 7. Araçlar Katmanı
- **Kod Yürütme**: Üretilen kodu test etmek için araçlar
- **Sürüm Kontrolü**: Git entegrasyonu
- **Dosya Yönetimi**: Dosya okuma, yazma, güncelleme işlemleri

### 8. Konfigürasyon Katmanı
- **System Config**: Sistem çapında konfigürasyon
- **Workflow Config**: İş akışı tanımları
- **Agent Config**: Ajan düzeyinde konfigürasyon
- **LLM Config**: Dil modeli ayarları ve yapılandırmaları

## İş Akışı ve Ajan Etkileşimi

CoFound.ai'nin çalışma süreci aşağıdaki gibidir:

1. **İstek Alımı**: Kullanıcıdan yazılım geliştirme isteği alınır
2. **İş Akışı Başlatma**: Uygun iş akışı seçilir ve başlatılır
3. **Proje Planlama**: Planner ajan, isteği analiz eder ve görevlere ayırır
4. **Mimari Tasarım**: Architect ajan, sistem mimarisini tasarlar
5. **Kodlama**: Developer ajan, kodu geliştirir
6. **Test**: Tester ajan, kodu test eder
7. **İnceleme**: Reviewer ajan, kodu inceler ve geliştirme önerileri sunar
8. **Dokümantasyon**: Documentor ajan, teknik dokümantasyon hazırlar
9. **Sonuç Teslimi**: Geliştirilen yazılım kullanıcıya teslim edilir

## Agentic Graph Orkestrasyon 

CoFound.ai'nin orkestrasyon mekanizması, esnek ve dinamik bir graf yapısına sahiptir:

1. **Dinamik Ajan Yönlendirme**: Her ajan, kendi uzmanlık alanına göre görevi çözer veya başka bir ajana devreder
2. **Handoff Tools**: Ajanlar, görevleri başka ajanlara devretmek için özel araçlar kullanır
3. **State Takibi**: Sistem, aktif ajanı, önceki ajanı ve iş akışının durumunu sürekli takip eder
4. **Koşullu Geçişler**: LangGraph conditional edges ile duruma bağlı olarak farklı ajanlara geçiş yapılır
5. **Streaming İzleme**: İş akışı, gerçek zamanlı olarak izlenebilir ve raporlanabilir

## LLM Entegrasyonu ve Test Modu

Sistem, iki modda çalışabilir:

1. **Üretim Modu**: Gerçek LLM çağrıları ile çalışır
2. **Test Modu**: LLM çağrıları yapmadan, önceden tanımlanmış yanıtlarla çalışır

Test modunda, sistem gerçek LLM maliyeti olmadan geliştirilebilir ve test edilebilir.

## Kalıcı Depolama ve İzlenebilirlik

Sistem, aşağıdaki verileri kalıcı olarak depolar:

1. **İş Akışı Durumu**: Her adımda iş akışının durumu kaydedilir
2. **Ajanlar Arası Mesajlar**: Tüm ajan etkileşimleri loglanır
3. **Artifacts**: Üretilen kod, dokümantasyon ve diğer eserler
4. **Log Kayıtları**: Tüm sistem log kayıtları yapılandırılmış formatta tutulur

## Çıktı Formatları

Kullanıcıya aşağıdaki formatlarda çıktı sunulur:

1. **Kod**: Geliştirilen yazılımın kaynak kodu
2. **Dokümantasyon**: Teknik dokümantasyon
3. **Test Sonuçları**: Yazılımın test sonuçları
4. **Uygulama**: Çalıştırılabilir uygulama

## Teknoloji Yığını

Sistem, aşağıdaki teknolojileri kullanır:

1. **Python**: Ana programlama dili
2. **LangChain**: LLM uygulamaları oluşturma framework'ü
3. **LangGraph**: Ajan orkestrasyon ve iş akışı motoru
4. **Vector DB**: Uzun dönemli hafıza için vektör veritabanı
5. **YAML**: Konfigürasyon ve iş akışı tanımlamaları için
6. **JSON**: Yapılandırılmış veri ve log formatı
7. **Git**: Sürüm kontrolü

## Gelecek Geliştirmeler

1. **Web Arayüzü**: Web tabanlı kullanıcı arayüzü
2. **Gerçek Zamanlı İzleme**: İş akışını gerçek zamanlı izleme paneli
3. **Ekip Modu**: Birden fazla kullanıcının aynı projede çalışabilmesi
4. **Özelleştirilebilir Ajanlar**: Kullanıcıların özel ajanlar tanımlayabilmesi
5. **Otomatik Ölçeklendirme**: İş yüküne göre ölçeklenebilen sistem
6. **Çoklu Dil Desteği**: Farklı programlama dilleriyle çalışabilme
7. **Kullanım Analitiği**: Sistem kullanımı ve performans analitiği
8. **Ayrıntılı İzleme Arayüzü**: Graph yürütme durumunu görselleştirme
