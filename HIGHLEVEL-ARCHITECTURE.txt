# CoFound.ai Yüksek Seviye Mimari Dökümantasyonu

## Genel Klasör/Dosya Yapısı

```
cofoundai/                      # Ana paket
  ├── agents/                   # Ajan tanımları ve davranışları
  ├── cli/                      # Komut satırı arabirimi
  ├── communication/            # Ajanlar arası iletişim
  ├── config/                   # Konfigürasyon dosyaları
  │   ├── schema/               # JSON şemaları
  ├── core/                     # Çekirdek sistem bileşenleri
  ├── memory/                   # Hafıza sistemleri
  ├── orchestration/            # Ajan orkestrasyon ve koordinasyon
  ├── tests/                    # Test dosyaları
  ├── tools/                    # Ajan araçları
  └── utils/                    # Yardımcı fonksiyonlar
logs/                           # Loglar
  ├── system/                   # Sistem logları
  └── workflows/                # İş akışı logları
```

## Modül Detayları

### cofoundai/agents/ - Ajan Tanımları ve Davranışları
- **planner.py**: Proje planlama ve görev ayrıştırma ajanı
- **architect.py**: Sistem mimarisi tasarlama ajanı
- **developer.py**: Kod geliştirme ajanı
- **tester.py**: Kod testi ve kalite kontrol ajanı
- **reviewer.py**: Kod inceleme ve geliştirme ajanı
- **documentor.py**: Proje dokümantasyon ajanı

### cofoundai/cli/ - Komut Satırı Arabirimi
- **main.py**: Ana CLI giriş noktası
- **commands.py**: CLI komutları ve işlevselliği
- **output_formatter.py**: Çıktı biçimlendirme

### cofoundai/communication/ - Ajan İletişimi
- **message_bus.py**: Mesaj iletim sistemi
- **protocol.py**: İletişim protokolü tanımları
- **schemas.py**: Mesaj şemaları

### cofoundai/config/ - Konfigürasyon Dosyaları
- **agent_config.yaml**: Ajan konfigürasyonları
- **system_config.yaml**: Sistem konfigürasyonları
- **workflows.yaml**: İş akışı tanımları (LangGraph entegrasyonu)
- **schema/**: JSON şema dosyaları
  - **workflows_schema.json**: İş akışı yapılandırma dosyasının şeması

### cofoundai/core/ - Çekirdek Sistem Bileşenleri
- **llm_interface.py**: LLM API entegrasyonu
- **config_manager.py**: Konfigürasyon yönetimi
- **system.py**: Sistem yönetimi
- **base_agent.py**: Temel ajan sınıfı

### cofoundai/memory/ - Hafıza Sistemleri
- **short_term.py**: Kısa süreli hafıza
- **long_term.py**: Uzun süreli hafıza (vektör veritabanı)
- **project_context.py**: Proje bağlamı

### cofoundai/orchestration/ - Ajan Orkestrasyon ve Koordinasyon
- **orchestrator.py**: Ana orkestrasyon motoru
- **workflow.py**: İş akışı tanımları
- **task_manager.py**: Görev dağıtımı ve takibi
- **langgraph_workflow.py**: LangGraph iş akışı yönetimi

### cofoundai/tests/ - Test Dosyaları
- **unit/**: Birim testleri
- **integration/**: Entegrasyon testleri
- **fixtures/**: Test fikstürleri

### cofoundai/tools/ - Ajan Araçları
- **code_execution.py**: Kod yürütme aracı
- **testing_tools.py**: Test araçları
- **version_control.py**: Sürüm kontrol aracı
- **file_manager.py**: Dosya yönetimi

### cofoundai/utils/ - Yardımcı Fonksiyonlar
- **logger.py**: Loglama modülü
- **prompt_templates.py**: Prompt şablonları
- **helpers.py**: Yardımcı fonksiyonlar

### logs/ - Log Dosyaları
- **system/**: Sistem logları
- **workflows/**: İş akışı logları

## Tamamlanan Çalışmalar

- LangGraph entegrasyonu için gerekli iş akışı yapıları oluşturuldu.
- JSON Schema doğrulama sistemi kuruldu ve uygulandı.
- Tüm ajan sınıfları (PlannerAgent, ArchitectAgent, DeveloperAgent, TesterAgent, ReviewerAgent, DocumentorAgent) oluşturuldu.
- İş akışı yönetimi için LangGraph entegrasyonu tamamlandı.
- Loglama sistemi kuruldu, hem sisteme hem de iş akışlarına özel loglar üretiliyor.
- YAML yapılandırma dosyaları oluşturuldu ve doğrulama süreçleri tamamlandı.
- YAML yapılandırma şemaları iyileştirildi ve esnek yapı desteği eklendi.
- İş akışları YAML dosyası, ana bölüm (main) altına taşınarak standardize edildi.

# CoFound.ai High-Level Architecture

CoFound.ai is a multi-agent PaaS (Platform as a Service) system that orchestrates 
specialized AI agents working together as a software development team.

## System Layers

The platform architecture follows a layered approach for better modularity and separation of concerns:

1. **User Interface Layer**
   - CLI (Command Line Interface) - Primary interaction point for users
   - Future: Web UI and API endpoints

2. **API & Service Layer**
   - REST API endpoints
   - Authentication and authorization
   - Rate limiting and request validation

3. **Business Logic Layer**
   - Workflow definitions
   - Project management
   - Task scheduling and orchestration
   - Decision making

4. **Agent Orchestration Layer**
   - LangGraph-based workflow engine
   - Agent state management
   - Message routing
   - Supervisor patterns

5. **Agent Layer**
   - Specialized agent implementations:
     - Planner Agent
     - Architect Agent
     - Developer Agent
     - Tester Agent
     - Reviewer Agent
     - Documentor Agent

6. **Memory Layer**
   - Short-term memory (conversation history)
   - Long-term memory (vector database)
   - Project context storage
   - Snapshot system

7. **Tools Layer**
   - FileManager for file operations
   - VersionControl for project-specific Git operations
   - CodeGenerator for code writing and editing
   - Context7Adapter for accessing documentation
   - More specialized tools for agents

8. **Integration Layer**
   - LLM service integration
   - Vector database connectors
   - Version control system integration 
   - Monitoring and analytics integrations

9. **Infrastructure Layer**
   - Configuration management
   - Logging and monitoring
   - Resource provisioning
   - Distributed deployment (future)

## Agent Communication Protocol (ACP)

Agents communicate through a standardized message protocol:

1. **Message Structure**
   - JSON-based message format
   - Support for multi-modal content (text, code, images)
   - Structured metadata

2. **Message Routing**
   - Direct agent-to-agent communication
   - Broadcast messages
   - Addressed messages with specific recipients
   - Request-response patterns

## LangGraph Integration

CoFound.ai uses LangGraph as the foundation for its multi-agent orchestration:

1. **Workflow Definitions**
   - YAML-based workflow configuration
   - Agent states and transitions
   - Conditional routing
   - Error handling and recovery

2. **State Management**
   - Graph-based state tracking
   - Message state
   - Agent-specific state
   - Global context

3. **Supervision Patterns**
   - Hierarchical supervision
   - Collaborative decision making
   - Task delegation
   - Progress monitoring

4. **Execution Models**
   - Synchronous execution
   - Streaming responses
   - Checkpoint-based resumption
   - Human-in-the-loop interruptions

## Memory System

The memory system is divided into three main components:

1. **Short-Term Memory**
   - Conversation history
   - Working memory
   - Current session state
   - Token-limited, recency-focused

2. **Vector Memory**
   - FAISS-based vector storage
   - Semantic search capabilities
   - Long-term context storage
   - Similarity-based retrieval

3. **Project Context**
   - Requirements
   - Architecture decisions
   - File structure
   - Design patterns
   - Persistent JSON-based storage

## Project-Specific Version Control

Each user project has its own isolated version control environment:

1. **Project Repositories**
   - Isolated Git repositories per project
   - Unique project identifiers
   - Independent workspace directories

2. **Snapshot System**
   - Point-in-time captures of project state
   - Metadata tracking
   - Restoration capabilities
   - Branching support

3. **Change Tracking**
   - Commit history
   - Code diffs
   - Branch management
   - Rollback capabilities

## CLI Workflow

The primary workflow for users follows this pattern:

1. User initiates a project via CLI
2. System initializes project workspace and Git repository
3. Planner agent breaks down the requirements
4. Agents collaborate through the LangGraph workflow
5. Progress is tracked and reported back to the user
6. User can review, approve, or modify the results
7. System maintains project state for future sessions

## Testing and Logging

1. **Test-Driven Development**
   - Unit tests for core components
   - Integration tests for agent interactions
   - End-to-end tests for workflows
   - Test mode for agent operations without LLM calls

2. **Comprehensive Logging**
   - Structured JSON logs
   - Agent activity tracking
   - Message flow monitoring
   - Performance metrics
   - Error diagnostics

## Deployment Model

Current deployment is local, with plans for:

1. **Self-Hosted**
   - Docker-based deployment
   - Configuration via environment variables
   - Resource management
   - Data persistence

2. **Future: Cloud-Hosted**
   - Multi-tenant architecture
   - Serverless functions
   - Managed services
   - Horizontal scaling

## Exception Handling

1. **Error Recovery**
   - LangGraph-based retry mechanisms
   - Fallback strategies
   - Checkpoint-based resumption
   - User intervention for critical errors

2. **Validation**
   - Input validation
   - Output validation
   - Schema enforcement
   - Consistency checks

## Security Considerations

1. **Data Security**
   - Isolated project workspaces
   - Minimal permissions
   - No external data sharing
   - Local-first approach

2. **Code Execution Safety**
   - Sandboxed environments
   - Limited scope for tool operations
   - Validation before execution
   - Audit trails
